Q.You are designing a printer queue for a computer lab. The lab has a printer that can only process one print job at a time. Your task is to implement a queue using a linked list to manage print jobs sent to the printer. Each print job is represented by the number of pages it contains. Implement the following operations:



Enqueue Print Job: Add a print job to the end of the queue.

Dequeue Print Job: Remove and process the next print job in the queue.

Display Queue: Display the print jobs in the queue.



Your program should handle these operations efficiently to ensure that print jobs are processed in the order they are received.

Input format :
The input consists of an integer option representing the action to be performed:

1: Enqueue a print job.

2: Dequeue and process the next print job.

3: Display the print jobs in the queue.

Any other integer: Invalid option.

If the option is 1, an integer represents the number of pages in the print job to be enqueued.

Output format :
The output consists of

For each operation, the program should provide the appropriate output messages:

If option 1 is chosen, display a message indicating that the print job has been enqueued.

If option 2 is chosen and a print job is dequeued, display a message indicating that the print job has been processed.

If option 2 is chosen and the queue is empty, display a message indicating that the queue is empty.

If option 3 is chosen, display the current print jobs in the queue.



Refer to the sample output for formatting specifications.

Code constraints :
The given test cases fall under the following constraints:

The number of pages in a print job is a positive integer.

The maximum number of print jobs is 50.

Sample test cases :
Input 1 :
1
5
3
Output 1 :
Print job with 5 pages is enqueued.
Print jobs in the queue: 5 pages 
Input 2 :
1
3
1
2
3
Output 2 :
Print job with 3 pages is enqueued.
Print job with 2 pages is enqueued.
Print jobs in the queue: 3 pages 2 pages 
Input 3 :
1
2
2
3
Output 3 :
Print job with 2 pages is enqueued.
Processing print job: 2 pages
Queue is empty.
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.




####################### ARRAY BASED IMPLEMENTATION :

#include <stdio.h>
#define MAX_SIZE 100
int queue[100];
int rear=-1;
int front=0;
void enqueue(int x){
    if(rear<MAX_SIZE-1){
        queue[++rear]=x;
        printf("Print job with %d pages is enqueued.\n",x);
    }
}
void dequeue(){
    if(front<=rear){
        printf("Processing print job: %d pages\n",queue[front++]);
    }
    else{
        printf("Queue is empty.\n");
    }
}
void display(){
    if(front<=rear){
        printf("Print jobs in the queue: ");
        for(int i=front;i<=rear;i++){
            printf("%d pages ",queue[i]);
        }
        printf("\n");
    }
    else{
        printf("Queue is empty.\n");
    }
}
int main(){
    int n;
    while(scanf("%d",&n)!=-1){
        switch(n){
            case 1:
            int x;
            scanf("%d",&x);
            enqueue(x);
            break;
            case 2:
            dequeue();
            break;
            case 3:
            display();
            break;
            default:
            printf("Invalid option\n");
            break;
        }
    }
}



####################### LINKED LIST IMPLEMENTATION :
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int pages;
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

void enqueue(int x) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->pages = x;
    newNode->next = NULL;
    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    printf("Print job with %d pages is enqueued.\n", x);
}

void dequeue() {
    if (front == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    struct Node* temp = front;
    printf("Processing print job: %d pages\n", front->pages);
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    free(temp);
}

void display() {
    if (front == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Print jobs in the queue: ");
    struct Node* temp = front;
    while (temp != NULL) {
        printf("%d pages ", temp->pages);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int n;
    while (scanf("%d", &n) != -1) {
        switch (n) {
            case 1: {
                int x;
                scanf("%d", &x);
                enqueue(x);
                break;
            }
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            default:
                printf("Invalid option\n");
                break;
        }
    }
    return 0;
}
