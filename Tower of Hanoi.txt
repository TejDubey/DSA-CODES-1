Tower of Hanoi all types :

#include <stdio.h>
#include <math.h>

//using stack, counting moves manually and also verfication by formulae
//printing the moves made by each disk indivisually

/*
int top=-1;
int stack[100];
int moves=0;
void pushmove(int x){
    stack[++top]=x;
}
void toh(int n, char from, char to, char aux){
    if(n==1){
        pushmove(1);
        printf("The disk %d moved from %c to %c\n",n,from,to);
        moves++;
        return;
    }
    toh(n-1,from,aux,to);
    moves++;
    pushmove(n);
    printf("The disk %d moved from %c to %c\n",n,from,to);
    toh(n-1,aux,to,from);
}
int main(){
    int n;
    scanf("%d",&n);
    toh(n,'A','C','B');
    printf("Total moves: %d\n",int(pow(2,n)-1));
    printf("Total moves: %d\n",moves);
    for(int i=1;i<=n;i++){
        printf("Disk %d : (%d moves)\n",i,int(pow(2,n-i)));
    }
}
*/

// normal recursive based approach
//manual count added


int movecount=0;
void toh(int n, char from, char to, char aux){
    if(n==1){
        printf("Disk %d moved from %c to %c\n",n,from,to);
        movecount++;
        return;
    }
    toh(n-1,from,aux,to);
    movecount++;
    printf("Disk %d moved from %c to %c\n",n,from,to);
    toh(n-1,aux,to,from);
}
int main(){
    int n;
    scanf("%d",&n);
    toh(n,'A','C','B');
    printf("Total moves: %d\n",int(pow(2,n)-1));
    printf("Total moves: %d\n",movecount);
    for(int i=1;i<=n;i++){
        printf("Disk %d : (%d moves)\n",i,int(pow(2,n-i)));
    }
}

//if its said to move all disks to a particular place say using 1,2,3 they want all at 3 so we pass toh(n,1,3,2); pass in order (from,aux,to)
